"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useData } from "@/lib/data-context"
import { ArrowLeft, Brain, TrendingUp, TrendingDown, AlertCircle, Target, PieChart, BarChart3 } from "lucide-react"
import Link from "next/link"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"

export default function AIAnalysisPage() {
  const { transactions } = useData()
  const [selectedMonth, setSelectedMonth] = useState<string>("2024-01")

  // Calculate monthly data from actual transactions
  const monthlyData = transactions.reduce(
    (acc, transaction) => {
      const date = new Date(transaction.date)
      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}`

      if (!acc[monthKey]) {
        acc[monthKey] = {
          month: monthKey,
          total: 0,
          transactions: 0,
          categories: {},
        }
      }

      acc[monthKey].total += transaction.amount
      acc[monthKey].transactions += 1

      if (!acc[monthKey].categories[transaction.category]) {
        acc[monthKey].categories[transaction.category] = 0
      }
      acc[monthKey].categories[transaction.category] += transaction.amount

      return acc
    },
    {} as Record<string, any>,
  )

  const monthlyDataArray = Object.values(monthlyData)
  const currentMonthData = monthlyData[selectedMonth]

  // Calculate category spending for current month
  const categoryData = currentMonthData
    ? Object.entries(currentMonthData.categories)
        .map(([category, amount]) => ({
          category,
          amount: Number(amount),
          percentage: Math.round((Number(amount) / currentMonthData.total) * 100),
        }))
        .sort((a, b) => b.amount - a.amount)
    : []

  // Chart colors
  const COLORS = ["#8b5cf6", "#6b7280", "#ea580c", "#dc2626", "#f97316"]

  // Mock AI insights (in a real app, this would be generated by AI)
  const aiInsights = {
    summary:
      "Based on your spending patterns, you've spent 15% more than last month, primarily due to increased shopping and dining expenses.",
    trends: [
      {
        type: "increase",
        category: "Shopping",
        change: "+23%",
        description: "Significant increase in shopping expenses compared to last month",
      },
      {
        type: "decrease",
        category: "Transportation",
        change: "-12%",
        description: "Reduced transportation costs, likely due to remote work",
      },
      {
        type: "stable",
        category: "Groceries",
        change: "+2%",
        description: "Consistent grocery spending within normal range",
      },
    ],
    recommendations: [
      {
        title: "Reduce Shopping Expenses",
        description: "Consider setting a monthly budget limit for shopping to control discretionary spending.",
        priority: "high",
      },
      {
        title: "Optimize Subscription Services",
        description:
          "Review your entertainment subscriptions - you have multiple streaming services that could be consolidated.",
        priority: "medium",
      },
      {
        title: "Take Advantage of Transportation Savings",
        description: "Your reduced transportation costs create an opportunity to increase savings or investments.",
        priority: "low",
      },
    ],
    budgetHealth: {
      score: 72,
      status: "Good",
      description: "Your spending is generally well-balanced, with room for improvement in discretionary categories.",
    },
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("ko-KR", {
      style: "currency",
      currency: "KRW",
    }).format(amount)
  }

  const getTrendIcon = (type: string) => {
    switch (type) {
      case "increase":
        return <TrendingUp className="h-4 w-4 text-red-500" />
      case "decrease":
        return <TrendingDown className="h-4 w-4 text-green-500" />
      default:
        return <BarChart3 className="h-4 w-4 text-blue-500" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-100 text-red-800 border-red-200"
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "low":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const availableMonths = Object.keys(monthlyData).sort().reverse()

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6">
          <Link href="/">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Dashboard
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-foreground flex items-center gap-2">
              <Brain className="h-8 w-8 text-accent" />
              AI Spending Analysis
            </h1>
            <p className="text-muted-foreground">Intelligent insights into your spending patterns</p>
          </div>
        </div>

        {/* Month Selector */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Analysis Period</CardTitle>
            <CardDescription>Select a month to analyze your spending patterns</CardDescription>
          </CardHeader>
          <CardContent>
            <Select value={selectedMonth} onValueChange={setSelectedMonth}>
              <SelectTrigger className="w-full md:w-64">
                <SelectValue placeholder="Select month" />
              </SelectTrigger>
              <SelectContent>
                {availableMonths.map((month) => (
                  <SelectItem key={month} value={month}>
                    {new Date(month + "-01").toLocaleDateString("en-US", { year: "numeric", month: "long" })}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </CardContent>
        </Card>

        {/* AI Summary */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Brain className="h-5 w-5 text-accent" />
              AI Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-foreground leading-relaxed">{aiInsights.summary}</p>
          </CardContent>
        </Card>

        {/* Budget Health Score */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-accent" />
              Budget Health Score
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between mb-4">
              <div>
                <p className="text-3xl font-bold text-foreground">{aiInsights.budgetHealth.score}/100</p>
                <p className="text-muted-foreground">{aiInsights.budgetHealth.status}</p>
              </div>
              <div className="text-right">
                <Badge variant="secondary" className="mb-2">
                  {aiInsights.budgetHealth.status}
                </Badge>
              </div>
            </div>
            <Progress value={aiInsights.budgetHealth.score} className="mb-3" />
            <p className="text-sm text-muted-foreground">{aiInsights.budgetHealth.description}</p>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* Spending Trends */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-accent" />
                Spending Trends
              </CardTitle>
              <CardDescription>Month-over-month changes by category</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {aiInsights.trends.map((trend, index) => (
                  <div key={index} className="flex items-start gap-3 p-3 border border-border rounded-lg">
                    {getTrendIcon(trend.type)}
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-1">
                        <p className="font-medium">{trend.category}</p>
                        <Badge variant="outline">{trend.change}</Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">{trend.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Category Breakdown */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <PieChart className="h-5 w-5 text-accent" />
                Category Breakdown
              </CardTitle>
              <CardDescription>
                Spending distribution for{" "}
                {selectedMonth &&
                  new Date(selectedMonth + "-01").toLocaleDateString("en-US", { year: "numeric", month: "long" })}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {categoryData.map((category, index) => (
                  <div key={category.category} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: COLORS[index % COLORS.length] }}
                      />
                      <span className="text-sm">{category.category}</span>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">{formatCurrency(category.amount)}</p>
                      <p className="text-xs text-muted-foreground">{category.percentage}%</p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* AI Recommendations */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-accent" />
              AI Recommendations
            </CardTitle>
            <CardDescription>Personalized suggestions to improve your financial health</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {aiInsights.recommendations.map((rec, index) => (
                <div key={index} className="p-4 border border-border rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-medium">{rec.title}</h4>
                    <Badge className={`${getPriorityColor(rec.priority)} border text-xs`}>
                      {rec.priority} priority
                    </Badge>
                  </div>
                  <p className="text-sm text-muted-foreground">{rec.description}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Monthly Spending Chart */}
        {currentMonthData && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5 text-accent" />
                Monthly Overview
              </CardTitle>
              <CardDescription>
                Total spent: {formatCurrency(currentMonthData.total)} • {currentMonthData.transactions} transactions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={categoryData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="category" angle={-45} textAnchor="end" height={80} fontSize={12} />
                    <YAxis tickFormatter={(value) => `$${value}`} fontSize={12} />
                    <Tooltip
                      formatter={(value) => [formatCurrency(Number(value)), "Amount"]}
                      labelStyle={{ color: "#374151" }}
                    />
                    <Bar dataKey="amount" fill="#8b5cf6" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
